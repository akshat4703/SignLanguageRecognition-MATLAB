clear; clc; close all;
fprintf('Starting Sign Language Model Training...\n');

datasetPath = '/MATLAB Drive/DATASET';

if ~exist(datasetPath, 'dir')
    error('Dataset path "%s" does not exist. Please check the path after unzipping.', datasetPath);
end

modelFileName = 'aslAZClassifier_HOG.mat';

imds = imageDatastore(datasetPath, ...
    'IncludeSubfolders', true, ...
    'LabelSource', 'foldernames');
fprintf('Dataset loaded from: %s\n', datasetPath);
fprintf('Total images found: %d\n', numel(imds.Files));

figure('Name', 'Training: Data Distribution');
tbl = countEachLabel(imds);
disp(tbl);
bar(tbl.Label, tbl.Count);
title('Image Count per Letter (Full Dataset)');
xlabel('ASL Letter'); ylabel('Count'); grid on;

[imdsTrain, imdsValidation] = splitEachLabel(imds, 0.7, 'randomized');
fprintf('Data split: %d training images, %d validation images.\n', ...
    numel(imdsTrain.Files), numel(imdsValidation.Files));

targetSize = [64 64]; 
cellSize = [8 8];     
function features = preprocessAndExtractHOG_AZ(img, targetSize, cellSize)

    imgResized = imresize(img, targetSize);

    if size(imgResized, 3) == 3, imgGray = rgb2gray(imgResized);
    else, imgGray = imgResized; end
    try
        features = extractHOGFeatures(imgGray, 'CellSize', cellSize);
    catch ME 
        warning('HOG extraction failed: %s. Returning zeros.', ME.message);
        numCells = floor(targetSize ./ cellSize);
        featuresPerCell = 31; 
        expectedLength = prod(numCells) * featuresPerCell;
        features = zeros(1, expectedLength, 'single');
    end
end
fprintf('Preprocessing function defined (TargetSize: [%d %d], CellSize: [%d %d])\n', ...
    targetSize(1), targetSize(2), cellSize(1), cellSize(2));

try
    firstImg = readimage(imdsTrain, 1);
    sampleFeatures = preprocessAndExtractHOG_AZ(firstImg, targetSize, cellSize);
    featureLength = numel(sampleFeatures);
    fprintf('HOG Feature vector length: %d\n', featureLength);
catch E
    error('Could not process first training image. Check files/function. Error: %s', E.message);
end

numTrainImages = numel(imdsTrain.Files);
trainingFeatures = zeros(numTrainImages, featureLength, 'single');
trainingLabels = imdsTrain.Labels;

fprintf('Extracting features from %d training images...\n', numTrainImages);
tic;
parfor i = 1:numTrainImages 
    try
        img = readimage(imdsTrain, i);
        trainingFeatures(i, :) = preprocessAndExtractHOG_AZ(img, targetSize, cellSize);
    catch ME
        warning('Error processing training image %d: %s. Skipping.', i, ME.message);
    end
end
toc;
fprintf('Training feature extraction complete.\n');

zeroRowsTrain = find(all(trainingFeatures == 0, 2));
if ~isempty(zeroRowsTrain)
    fprintf('WARNING: Found %d training images where feature extraction failed. Removing them.\n', numel(zeroRowsTrain));
    trainingFeatures(zeroRowsTrain, :) = [];
    trainingLabels(zeroRowsTrain) = [];
    numTrainImages = size(trainingFeatures, 1); 
end
if isempty(trainingFeatures), error('No valid training features extracted.'); end

fprintf('Training the SVM classifier...\n');
tic;
classifier = fitcecoc(trainingFeatures, trainingLabels, 'Learners', 'linear', 'Coding', 'onevsall');
toc;
fprintf('Classifier training complete.\n');

fprintf('Evaluating the trained model on the validation set...\n');

numValidationImages = numel(imdsValidation.Files);
validationFeatures = zeros(numValidationImages, featureLength, 'single');
validationLabels = imdsValidation.Labels; 

fprintf('Extracting features from %d validation images...\n', numValidationImages);
tic;
parfor i = 1:numValidationImages 
     try
        img = readimage(imdsValidation, i);
        validationFeatures(i, :) = preprocessAndExtractHOG_AZ(img, targetSize, cellSize);
     catch ME
        warning('Error processing validation image %d: %s. Skipping.', i, ME.message);
     end
end
toc;

zeroRowsVal = find(all(validationFeatures == 0, 2));
validValIndices = setdiff(1:numValidationImages, zeroRowsVal); 

if ~isempty(zeroRowsVal)
    fprintf('WARNING: Found %d validation images where feature extraction failed. Evaluating on the rest.\n', numel(zeroRowsVal));
end

if isempty(validValIndices)
    warning('No valid validation features extracted. Skipping validation evaluation.');
else

    predictedLabels = predict(classifier, validationFeatures(validValIndices,:));
    actualLabels = validationLabels(validValIndices); 

    accuracy = mean(predictedLabels == actualLabels);
    fprintf('\nValidation Accuracy: %.2f%%\n', accuracy * 100);

    figure('Name', 'Training: Confusion Matrix (Validation)');
    cm = confusionchart(actualLabels, predictedLabels);
    cm.Title = sprintf('Validation Confusion Matrix (Accuracy: %.2f%%)', accuracy * 100);
    cm.RowSummary = 'row-normalized';
end

fprintf('Saving trained model and parameters to %s...\n', modelFileName);
save(modelFileName, 'classifier', 'featureLength', 'targetSize', 'cellSize');
fprintf('Model saved successfully.\n');

fprintf('\n--- Training Script Finished ---\n');